
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 14 01:34:49 BRT 2017
//----------------------------------------------------

package compiler;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 14 01:34:49 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\007\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\012" +
    "\000\002\005\005\000\002\005\003\000\002\006\003\000" +
    "\002\006\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\005\000\002\007\012\000\002\007\006\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\006\007\006\023\005\001\002\000\004\002" +
    "\uffff\001\002\000\004\012\056\001\002\000\004\023\013" +
    "\001\002\000\004\002\012\001\002\000\006\002\ufffd\007" +
    "\006\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002\000\004\017\014\001\002\000\004\023\015\001" +
    "\002\000\006\020\ufffa\022\054\001\002\000\004\020\017" +
    "\001\002\000\004\012\020\001\002\000\010\004\023\023" +
    "\021\024\024\001\002\000\034\005\ufff6\006\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\046\020\ufff6\021\ufff6\022\ufff6\001\002\000\014\013\036" +
    "\014\032\015\031\016\034\021\045\001\002\000\010\004" +
    "\023\023\021\024\024\001\002\000\032\005\ufff7\006\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\001\002\000\020\010\027" +
    "\011\030\012\033\013\036\014\032\015\031\016\034\001" +
    "\002\000\010\004\023\023\021\024\024\001\002\000\010" +
    "\004\ufff2\023\ufff2\024\ufff2\001\002\000\010\004\ufff1\023" +
    "\ufff1\024\ufff1\001\002\000\010\004\uffed\023\uffed\024\uffed" +
    "\001\002\000\010\004\uffee\023\uffee\024\uffee\001\002\000" +
    "\010\004\ufff0\023\ufff0\024\ufff0\001\002\000\010\004\uffec" +
    "\023\uffec\024\uffec\001\002\000\010\004\023\023\021\024" +
    "\024\001\002\000\010\004\uffef\023\uffef\024\uffef\001\002" +
    "\000\032\005\ufff5\006\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\036\014\032\015\031\016\034\020\ufff5\021\ufff5\022\ufff5" +
    "\001\002\000\014\005\041\013\036\014\032\015\031\016" +
    "\034\001\002\000\010\004\023\023\021\024\024\001\002" +
    "\000\014\006\043\013\036\014\032\015\031\016\034\001" +
    "\002\000\010\004\023\023\021\024\024\001\002\000\032" +
    "\005\ufff4\006\ufff4\010\ufff4\011\ufff4\012\ufff4\013\036\014" +
    "\032\015\031\016\034\020\ufff4\021\ufff4\022\ufff4\001\002" +
    "\000\006\002\ufffc\007\ufffc\001\002\000\010\004\023\023" +
    "\021\024\024\001\002\000\016\013\036\014\032\015\031" +
    "\016\034\020\ufff9\022\ufff9\001\002\000\006\020\051\022" +
    "\052\001\002\000\032\005\ufff3\006\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\001\002\000\010\004\023\023\021\024\024" +
    "\001\002\000\016\013\036\014\032\015\031\016\034\020" +
    "\ufff8\022\ufff8\001\002\000\004\023\015\001\002\000\004" +
    "\020\ufffb\001\002\000\004\024\057\001\002\000\004\021" +
    "\060\001\002\000\006\007\006\023\005\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\010\002\006\003\003\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\010\004\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\021\001\001\000\002\001\001\000\004" +
    "\010\034\001\001\000\004\007\024\001\001\000\002\001" +
    "\001\000\006\010\034\011\025\001\001\000\004\007\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\036\001\001\000\002\001\001\000\004\010" +
    "\034\001\001\000\004\010\034\001\001\000\004\007\041" +
    "\001\001\000\004\010\034\001\001\000\004\007\043\001" +
    "\001\000\004\010\034\001\001\000\002\001\001\000\006" +
    "\006\047\007\046\001\001\000\004\010\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\052\001\001" +
    "\000\004\010\034\001\001\000\004\005\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\060\003\003\004\007\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main(String[] ARGS) throws Exception{
        try {
      Parser parser = new Parser();
      parser.setScanner(new Lexer(new FileReader (ARGS[0])));
            parser.parse();
        } catch ( IOException exception ) {
            throw new Error( "Não conseguiu abrir arquivo." );
        }
    }

    public void syntax_error (Symbol s) {
        report_error("Erro de sintaxe na linha: " + (s.right+1) + " e na coluna: " + s.left + ". Texto: -- " +
        s.value+ " --", null);
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("\nOcorreu um erro na linha " + (s.right)+ ", coluna "+s.left+". Identificador " +
        s.value + " não reconhecido.");
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OP_ARIT ::= DIVISAO 
            {
              No RESULT =null;
		int divisaoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divisaoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token divisao = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(divisao, "DIVISAO");
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OP_ARIT ::= MULTIPLICACAO 
            {
              No RESULT =null;
		int multiplicacaoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int multiplicacaoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token multiplicacao = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(multiplicacao, "MULTIPLICACAO");
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OP_ARIT ::= SUBTRACAO 
            {
              No RESULT =null;
		int subtracaoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int subtracaoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token subtracao = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(subtracao, "SUBTRACAO");
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OP_ARIT ::= SOMA 
            {
              No RESULT =null;
		int somaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int somaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token soma = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(soma, "SOMA");
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_ARIT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OP_REL ::= IGUAL 
            {
              No RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token igual = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(igual, "IGUAL");
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OP_REL ::= MENOR 
            {
              No RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token menor = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(menor, "MENOR");
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OP_REL ::= MAIOR 
            {
              No RESULT =null;
		int maiorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maiorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token maior = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(maior, "MAIOR");
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= IDENTIFICADOR ABRE_PARENTESIS SEQ FECHA_PARENTESIS 
            {
              No RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int abre_parentesisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int abre_parentesisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token abre_parentesis = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int SEQleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int SEQright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No SEQ = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fecha_parentesisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fecha_parentesisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token fecha_parentesis = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(identificador, "EXP");
                    no.addFilho(abre_parentesis, "ABRE_PARENTESIS");
                    no.addFilho(SEQ);
                    no.addFilho(fecha_parentesis, "FECHA_PARENTESIS");
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= SE EXP OP_REL EXP ENTAO EXP SENAO EXP 
            {
              No RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token se = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int EXP1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int EXP1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		No EXP1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int OP_RELleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int OP_RELright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		No OP_REL = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int EXP2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int EXP2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		No EXP2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int entaoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int entaoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token entao = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int EXP3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int EXP3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No EXP3 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int senaoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int senaoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token senao = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int EXP4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXP4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No EXP4 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(se, "SE");
                    no.addFilho(EXP1);
                    no.addFilho(OP_REL, "OP_REL");
                    no.addFilho(EXP2);
                    no.addFilho(entao, "ENTAO");
                    no.addFilho(EXP3);
                    no.addFilho(senao, "SENAO");
                    no.addFilho(EXP4);
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= EXP OP_ARIT EXP 
            {
              No RESULT =null;
		int EXP1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int EXP1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No EXP1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int OP_ARITleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int OP_ARITright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No OP_ARIT = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int EXP2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXP2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No EXP2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(EXP1, "EXP_ARIT");
                    no.addFilho(OP_ARIT, "OP_ARIT");
                    no.addFilho(EXP2);
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= IDENTIFICADOR 
            {
              No RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(identificador, "IDENTIFICADOR_PARAM");
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= INTEIRO 
            {
              No RESULT =null;
		int inteiroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inteiroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token inteiro = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(inteiro, "INTEIRO");
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SEQ ::= SEQ VIRGULA EXP 
            {
              No RESULT =null;
		int SEQleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int SEQright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No SEQ = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int virgulaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int virgularight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token virgula = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int EXPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No EXP = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(SEQ);
                    no.addFilho(virgula, "VIRGULA");
                    no.addFilho(EXP);
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SEQ ::= EXP 
            {
              No RESULT =null;
		int EXPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No EXP = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(EXP);
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ARGS ::= IDENTIFICADOR 
            {
              No RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(identificador, "IDENTIFICADOR_PARAM");
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ARGS ::= IDENTIFICADOR VIRGULA ARGS 
            {
              No RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int virgulaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int virgularight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token virgula = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ARGSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ARGSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No ARGS = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(identificador, "IDENTIFICADOR_PARAM");
                    no.addFilho(virgula, "VIRGULA");
                    no.addFilho(ARGS);
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D ::= DEF IDENTIFICADOR ABRE_PARENTESIS ARGS FECHA_PARENTESIS IGUAL EXP PONTO_E_VIRGULA 
            {
              No RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token def = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int abre_parentesisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int abre_parentesisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token abre_parentesis = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ARGSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ARGSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		No ARGS = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fecha_parentesisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fecha_parentesisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token fecha_parentesis = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token igual = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int EXPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int EXPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No EXP = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ponto_e_virgulaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ponto_e_virgularight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token ponto_e_virgula = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(def, "DEF");
                    no.addFilho(identificador, "IDENTIFICADOR_FUNCAO_DEF");
                    no.addFilho(abre_parentesis, "ABRE_PARENTESIS");
                    no.addFilho(ARGS);
                    no.addFilho(fecha_parentesis, "FECHA_PARENTESIS");
                    no.addFilho(igual, "IGUAL");
                    no.addFilho(EXP);
                    no.addFilho(ponto_e_virgula, "PONTO_E_VIRGULA");
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // I ::= D 
            {
              No RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No D = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(D);
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // I ::= D I 
            {
              No RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No D = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No I = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(D);
                    no.addFilho(I);
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= I 
            {
              No RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No I = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(I);
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // P ::= IDENTIFICADOR IGUAL INTEIRO PONTO_E_VIRGULA P 
            {
              No RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token igual = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int inteiroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int inteiroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token inteiro = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ponto_e_virgulaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ponto_e_virgularight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token ponto_e_virgula = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No P = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    No no = new No(identificador, "IDENTIFICADOR");
                    no.addFilho(igual, "IGUAL");
                    no.addFilho(inteiro, "INTEIRO");
                    no.addFilho(ponto_e_virgula, "PONTO_E_VIRGULA");
                    no.addFilho(P);
                    RESULT = no;
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No start_val = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

