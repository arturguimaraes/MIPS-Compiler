
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 05 12:24:56 BRT 2017
//----------------------------------------------------

package compiler;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 05 12:24:56 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\007\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\011" +
    "\000\002\005\004\000\002\006\004\000\002\006\002\000" +
    "\002\010\005\000\002\010\002\000\002\007\004\000\002" +
    "\007\002\000\002\012\006\000\002\012\002\000\002\011" +
    "\003\000\002\011\004\000\002\011\012\000\002\011\004" +
    "\000\002\013\005\000\002\013\002\000\002\014\004\000" +
    "\002\015\005\000\002\015\002\000\002\016\005\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\006\011\006\026\005\001\002\000\004\002" +
    "\uffff\001\002\000\004\014\073\001\002\000\004\026\013" +
    "\001\002\000\004\002\012\001\002\000\006\002\ufffd\011" +
    "\006\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002\000\004\021\014\001\002\000\004\026\015\001" +
    "\002\000\006\022\ufff9\024\071\001\002\000\004\022\017" +
    "\001\002\000\004\014\020\001\002\000\012\006\025\021" +
    "\027\026\022\027\026\001\002\000\030\002\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\065\016" +
    "\062\022\uffed\024\uffed\001\002\000\026\002\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\021\053\022" +
    "\ufff3\024\ufff3\001\002\000\006\002\ufffc\011\ufffc\001\002" +
    "\000\034\002\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\047\020\046\022\uffea" +
    "\024\uffea\001\002\000\012\006\025\021\027\026\022\027" +
    "\026\001\002\000\024\002\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\022\ufff2\024\ufff2\001\002\000" +
    "\012\006\025\021\027\026\022\027\026\001\002\000\004" +
    "\022\031\001\002\000\034\002\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\022\uffe9\024\uffe9\001\002\000\010\012\035\013" +
    "\036\014\033\001\002\000\012\006\uffe6\021\uffe6\026\uffe6" +
    "\027\uffe6\001\002\000\012\006\025\021\027\026\022\027" +
    "\026\001\002\000\012\006\uffe8\021\uffe8\026\uffe8\027\uffe8" +
    "\001\002\000\012\006\uffe7\021\uffe7\026\uffe7\027\uffe7\001" +
    "\002\000\004\007\040\001\002\000\012\006\025\021\027" +
    "\026\022\027\026\001\002\000\004\010\042\001\002\000" +
    "\012\006\025\021\027\026\022\027\026\001\002\000\024" +
    "\002\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\022\ufff0\024\ufff0\001\002\000\030\002\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\022\uffec\024\uffec\001\002\000\004\021\027\001\002" +
    "\000\004\021\uffe2\001\002\000\004\021\uffe3\001\002\000" +
    "\034\002\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\047\020\046\022\uffea\024" +
    "\uffea\001\002\000\030\002\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\022\uffeb\024" +
    "\uffeb\001\002\000\024\002\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\022\ufff1\024\ufff1\001\002\000" +
    "\012\006\025\021\027\026\022\027\026\001\002\000\006" +
    "\022\ufff7\024\056\001\002\000\004\022\061\001\002\000" +
    "\012\006\025\021\027\026\022\027\026\001\002\000\006" +
    "\022\ufff7\024\056\001\002\000\004\022\ufff8\001\002\000" +
    "\024\002\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\022\ufff4\024\ufff4\001\002\000\004\021\uffe4\001" +
    "\002\000\024\002\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\022\uffef\024\uffef\001\002\000\004\021" +
    "\027\001\002\000\004\021\uffe5\001\002\000\030\002\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\065\016\062\022\uffed\024\uffed\001\002\000\024\002\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\022" +
    "\uffee\024\uffee\001\002\000\004\022\ufffb\001\002\000\004" +
    "\026\015\001\002\000\004\022\ufffa\001\002\000\004\027" +
    "\074\001\002\000\004\023\075\001\002\000\006\011\006" +
    "\026\005\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\010\002\006\003\003\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\010\004\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\015" +
    "\001\001\000\004\006\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\022\014\020\016\023\001\001" +
    "\000\006\013\062\020\063\001\001\000\004\012\051\001" +
    "\001\000\002\001\001\000\006\015\043\021\044\001\001" +
    "\000\010\011\031\014\020\016\023\001\001\000\002\001" +
    "\001\000\010\011\027\014\020\016\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\033\001\001\000" +
    "\002\001\001\000\010\011\036\014\020\016\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\040\014\020\016\023\001\001\000\002\001\001" +
    "\000\010\011\042\014\020\016\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\050\021\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\053" +
    "\014\020\016\023\001\001\000\004\010\054\001\001\000" +
    "\002\001\001\000\010\011\056\014\020\016\023\001\001" +
    "\000\004\010\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\065" +
    "\016\023\001\001\000\002\001\001\000\006\013\066\020" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\075\003\003\004\007\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main(String[] args) throws Exception{
        try {
			Parser parser = new Parser();
			parser.setScanner(new Lexer(new FileReader (args[0])));
            parser.parse();
        } catch ( IOException exception ) {
            throw new Error( "Não conseguiu abrir arquivo." );
        }
    }

    public void syntax_error (Symbol s) {
        report_error("Erro de sintaxe na linha: " + (s.right+1) + " e na coluna: " + s.left + ". Texto: -- " +
        s.value+ " --", null);
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("\nOcorreu um erro na linha " + (s.right)+ ", coluna "+s.left+". Identificador " +
        s.value + " não reconhecido.");
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VAZIO ::= branco 
            {
              No RESULT =null;
		int brancoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int brancoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token branco = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										RESULT = new No();
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAZIO",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OP_MULT ::= DIVISAO 
            {
              No RESULT =null;
		int divisaoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divisaoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token divisao = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(divisao);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_MULT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP_MULT ::= MULTIPLICACAO 
            {
              No RESULT =null;
		int multiplicacaoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int multiplicacaoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token multiplicacao = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(multiplicacao);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_MULT",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP_SOMA ::= SUBTRACAO 
            {
              No RESULT =null;
		int subtracaoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int subtracaoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token subtracao = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(subtracao);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_SOMA",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP_SOMA ::= SOMA 
            {
              No RESULT =null;
		int somaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int somaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token soma = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(soma);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_SOMA",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP_REL ::= IGUAL 
            {
              No RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token igual = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(igual);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP_REL ::= MENOR 
            {
              No RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token menor = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(menor);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP_REL ::= MAIOR 
            {
              No RESULT =null;
		int maiorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maiorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token maior = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(maior);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_REL",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // F ::= ABRE_PARENTESIS EXP FECHA_PARENTESIS 
            {
              No RESULT =null;
		int abre_parentesisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int abre_parentesisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token abre_parentesis = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int EXPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int EXPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No EXP = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fecha_parentesisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fecha_parentesisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token fecha_parentesis = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(new Token("#"));
										no.addFilho(abre_parentesis);
										no.addFilho(EXP);
										no.addFilho(fecha_parentesis);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // T_TEMP ::= 
            {
              No RESULT =null;
		
										RESULT = new No();
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_TEMP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // T_TEMP ::= OP_MULT F T_TEMP 
            {
              No RESULT =null;
		int OP_MULTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int OP_MULTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No OP_MULT = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No F = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int T_TEMPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int T_TEMPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No T_TEMP = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(new Token("#"));
										no.addFilho(OP_MULT);
										no.addFilho(F);
										no.addFilho(T_TEMP);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_TEMP",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // T ::= F T_TEMP 
            {
              No RESULT =null;
		int Fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No F = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int T_TEMPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int T_TEMPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No T_TEMP = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = F;
										no.addFilho(T_TEMP);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP_TEMP ::= 
            {
              No RESULT =null;
		
										RESULT = new No();
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_TEMP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP_TEMP ::= OP_SOMA T EXP_TEMP 
            {
              No RESULT =null;
		int OP_SOMAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int OP_SOMAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No OP_SOMA = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No T = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int EXP_TEMPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXP_TEMPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No EXP_TEMP = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(new Token("#"));
										no.addFilho(OP_SOMA);
										no.addFilho(T);
										no.addFilho(EXP_TEMP);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_TEMP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= T EXP_TEMP 
            {
              No RESULT =null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No T = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int EXP_TEMPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXP_TEMPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No EXP_TEMP = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = T;
										no.addFilho(EXP_TEMP);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= SE EXP OP_REL EXP ENTAO EXP SENAO EXP 
            {
              No RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token se = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expressao1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expressao1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		No expressao1 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int OP_RELleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int OP_RELright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		No OP_REL = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expressao2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expressao2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		No expressao2 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int entaoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int entaoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token entao = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressao3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressao3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No expressao3 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int senaoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int senaoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token senao = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expressao4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressao4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No expressao4 = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(new Token("#"));
										no.addFilho(se);
										no.addFilho(expressao1);
										no.addFilho(OP_REL);
										no.addFilho(expressao2);
										no.addFilho(entao);
										no.addFilho(expressao3);
										no.addFilho(senao);
										no.addFilho(expressao4);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= IDENTIFICADOR EXP_N 
            {
              No RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int EXP_Nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXP_Nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No EXP_N = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(new Token("#"));
										no.addFilho(identificador);
										no.addFilho(EXP_N);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= INTEIRO 
            {
              No RESULT =null;
		int inteiroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inteiroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token inteiro = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(inteiro);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP_N ::= 
            {
              No RESULT =null;
		
										RESULT = new No();
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_N",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP_N ::= ABRE_PARENTESIS EXP SEQ_N FECHA_PARENTESIS 
            {
              No RESULT =null;
		int abre_parentesisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int abre_parentesisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token abre_parentesis = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int EXPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int EXPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		No EXP = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int SEQ_Nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int SEQ_Nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No SEQ_N = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fecha_parentesisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fecha_parentesisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token fecha_parentesis = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(new Token("#"));
										no.addFilho(abre_parentesis);
										no.addFilho(EXP);
										no.addFilho(SEQ_N);
										no.addFilho(fecha_parentesis);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP_N",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SEQ ::= 
            {
              No RESULT =null;
		
										RESULT = new No();
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SEQ ::= EXP SEQ_N 
            {
              No RESULT =null;
		int EXPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int EXPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No EXP = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int SEQ_Nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int SEQ_Nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No SEQ_N = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(EXP);
										no.addFilho(SEQ_N);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SEQ_N ::= 
            {
              No RESULT =null;
		
										RESULT = new No();
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ_N",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SEQ_N ::= VIRGULA EXP SEQ_N 
            {
              No RESULT =null;
		int virgulaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int virgularight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token virgula = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int EXPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int EXPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No EXP = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int SEQ_Nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int SEQ_Nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No SEQ_N = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(new Token("#"));
										no.addFilho(virgula);
										no.addFilho(EXP);
										no.addFilho(SEQ_N);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ_N",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ARGS_N ::= 
            {
              No RESULT =null;
		
										RESULT = new No();
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_N",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ARGS_N ::= VIRGULA ARGS 
            {
              No RESULT =null;
		int virgulaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int virgularight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token virgula = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ARGSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ARGSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No ARGS = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(new Token("#"));
										no.addFilho(virgula);
										no.addFilho(ARGS);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_N",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ARGS ::= IDENTIFICADOR ARGS_N 
            {
              No RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ARGS_Nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ARGS_Nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No ARGS_N = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(new Token("#"));
										no.addFilho(identificador);
										no.addFilho(ARGS_N);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D ::= DEF IDENTIFICADOR ABRE_PARENTESIS ARGS FECHA_PARENTESIS IGUAL EXP 
            {
              No RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token def = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int abre_parentesisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int abre_parentesisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token abre_parentesis = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ARGSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ARGSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		No ARGS = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fecha_parentesisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fecha_parentesisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token fecha_parentesis = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token igual = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int EXPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No EXP = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(new Token("#"));
										no.addFilho(def);
										no.addFilho(identificador);
										no.addFilho(abre_parentesis);
										no.addFilho(ARGS);
										no.addFilho(fecha_parentesis);
										no.addFilho(igual);
										no.addFilho(EXP);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // I ::= D 
            {
              No RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No D = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										RESULT = D;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // I ::= D I 
            {
              No RESULT =null;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No D = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No I = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(new Token("#"));
										no.addFilho(D);
										no.addFilho(I);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= I 
            {
              No RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No I = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										System.out.println(I);
										RESULT = I;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // P ::= IDENTIFICADOR IGUAL INTEIRO PONTO_E_VIRGULA P 
            {
              No RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token identificador = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token igual = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int inteiroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int inteiroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token inteiro = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ponto_e_virgulaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ponto_e_virgularight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token ponto_e_virgula = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		No P = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
										No no = new No(new Token("#"));
										no.addFilho(new No(identificador));
										no.addFilho(new No(igual));
										no.addFilho(new No(inteiro));
										no.addFilho(new No(ponto_e_virgula));
										no.addFilho(P);
										RESULT = no;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		No start_val = (No)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

